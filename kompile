#!/bin/bash

# Kompile - Smart C compiler wrapper

# --- Debugging helper (set DEBUG=1 to enable) ---
DEBUG=${DEBUG:-0}
log() {
    if [ "$DEBUG" -eq 1 ]; then
        echo "[DEBUG] $1"
    fi
}

# --- Load configuration ---
CONFIG_FILES=(
    "$./kompile.conf"  # Local config
    "$HOME/.config/kompile.conf"    # User config
)

# Default fallback flags (if config fails)
FALLBACK_FLAGS=(-std=c99 -pedantic -Wall -Wextra -Werror -O2 -g)

# Try to load config
CONFIG_LOADED=0
for config in "${CONFIG_FILES[@]}"; do
    if [ -f "$config" ]; then
        log "Found config: $config"
        while IFS='=' read -r key value; do
            # Skip comments and empty lines
            [[ "$key" =~ ^# ]] || [[ -z "$key" ]] && continue
            
            # Trim whitespace and quotes
            key="${key#"${key%%[![:space:]]*}"}"   # Left trim
            key="${key%"${key##*[![:space:]]}"}"   # Right trim
            value="${value#\"}"                    # Remove leading quote
            value="${value%\"}"                    # Remove trailing quote
            value="${value#"${value%%[![:space:]]*}"}"  # Left trim
            value="${value%"${value##*[![:space:]]}"}"  # Right trim

            declare "$key"="$value"
            log "Config set: $key=$value"
        done < "$config"
        CONFIG_LOADED=1
        break
    fi
done

if [ "$CONFIG_LOADED" -eq 0 ]; then
    log "No config found. Using fallback flags."
fi

# --- Usage message ---
usage() {
    echo "Usage: kompile [options] <source_file.c> [output_name]"
    echo "Options:"
    echo "  -c    Compile only (do not execute)"
    echo "  -l    Use clang instead of default compiler"
    echo "  -h    Show this help message"
}

# --- Parse options ---
EXECUTE=${DEFAULT_EXECUTE:-1}
COMPILER=${DEFAULT_COMPILER:-gcc}
while getopts "clh" opt; do
    case $opt in
        c) EXECUTE=0 ;;
        l) COMPILER=${CLANG_COMPILER:-clang} ;;
        h) usage; exit 0 ;;
        *) usage; exit 1 ;;
    esac
done
shift $((OPTIND - 1))

# --- Check compiler availability (gcc/clang) ---
if ! command -v "$COMPILER" > /dev/null; then
    echo "Error: $COMPILER not found."
    exit 1
fi

# --- Check source file ---
if [ $# -eq 0 ]; then
    usage
    exit 1
fi

# --- Prepare flags ---
if [ "$CONFIG_LOADED" -eq 1 ]; then
    IFS=',' read -ra COMMON_FLAGS <<< "${COMMON_FLAGS:-}"
    if [ "$COMPILER" = "clang" ]; then
        IFS=',' read -ra SPECIFIC_FLAGS <<< "${CLANG_FLAGS:-}"
    else
        IFS=',' read -ra SPECIFIC_FLAGS <<< "${GCC_FLAGS:-}"
    fi
    COMPILATION_FLAGS=("${COMMON_FLAGS[@]}" "${SPECIFIC_FLAGS[@]}")

    IFS=',' read -ra LIB_FLAGS <<< "${LIB_FLAGS:-}"
    LIB_FLAGS=("${LIB_FLAGS[@]}")
else
    log "Using fallback flags: ${FALLBACK_FLAGS[*]}"
    COMPILATION_FLAGS=("${FALLBACK_FLAGS[@]}")
fi

# --- Set output ---
SOURCE="$1"
OUTPUT="${2:-${SOURCE%.*}}"
if [ -n "$OUTPUT_DIR" ]; then
    mkdir -p "$OUTPUT_DIR"
    OUTPUT="$OUTPUT_DIR/$(basename "$OUTPUT")"
fi

# --- Debug output ---
log "Compiler: $COMPILER"
log "Compilation Flags: ${COMPILATION_FLAGS[*]}"
log "Lib Flags: ${LIB_FLAGS[*]}"
log "Source: $SOURCE"
log "Output: $OUTPUT"

# --- Compile ---
echo "🔧 Compiling $SOURCE → $OUTPUT using $COMPILER..."
"$COMPILER" "${COMPILATION_FLAGS[@]}" -o "$OUTPUT" "$SOURCE" "${LIB_FLAGS[@]}"

if [ $? -eq 0 ]; then
    echo "✅ Compilation successful!"
    if [ $EXECUTE -eq 1 ]; then
        echo "🚀 Executing $OUTPUT..."
        echo "----------------------------------------"
        "$OUTPUT"
    fi
else
    echo "❌ Compilation failed."
    exit 1
fi
